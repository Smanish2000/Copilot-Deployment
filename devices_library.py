import streamlit as st
from azure.core.credentials import AzureKeyCredential
from langchain.text_splitter import RecursiveCharacterTextSplitter
import numpy as np
import faiss
import plotly.express as px
from langchain_community.vectorstores import FAISS
from langchain_core.vectorstores import VectorStoreRetriever
from langchain.chains import RetrievalQA
from openai import AzureOpenAI
from langchain_openai import AzureOpenAIEmbeddings
from langchain.prompts import PromptTemplate
from langchain.chains.question_answering import load_qa_chain
from langchain_core.messages import HumanMessage
from langchain_openai import AzureChatOpenAI
import openai
import pyodbc
import urllib
from sqlalchemy import create_engine
import pandas as pd
from azure.identity import InteractiveBrowserCredential
from pandasai import SmartDataframe
import pandas as pd
import matplotlib.pyplot as plt
import os
import time
from PIL import Image
import base64
import pandasql as ps
import matplotlib.pyplot as plt
import seaborn as sns
import re
import requests
from io import BytesIO
import io
import streamlit as st
from fuzzywuzzy import process
from rapidfuzz import process, fuzz

global full_response
full_response = ""

os.environ['KMP_DUPLICATE_LIB_OK'] = 'TRUE'
#Initializing API Keys to use LLM
os.environ["AZURE_OPENAI_API_KEY"] = "a22e367d483f4718b9e96b1f52ce6d53"
os.environ["AZURE_OPENAI_ENDPOINT"] = "https://hulk-openai.openai.azure.com/"

from openai import AzureOpenAI
client = AzureOpenAI(
    api_key=os.getenv("672370cd6ca440f2a0327351d4f4d2bf"),  
    api_version="2024-02-01",
    azure_endpoint = os.getenv("https://hulk-openai.openai.azure.com/")
    )

deployment_name='SurfaceGenAI'
azure_deployment_name = "Verbatim-Synthesis"
azure_embedding_name ="Embedding-Model"

RCR_Sales_Data = pd.read_csv('RCR Sales Data Sample V5.csv')
dev_mapping = pd.read_csv('SalesSentimentMapping_V2.csv')
Devices_Sentiment_Data  = pd.read_csv("Windows_Data_116K_V2.csv")



# if 'selected_device_comparison' not in st.session_state:
#     st.session_state['selected_device_comparison'] = None

def Sentiment_Score_Derivation(value):
    try:
        if value == "Positive":
            return 1
        elif value == "Negative":
            return -1
        else:
            return 0
    except:
        err = f"An error occurred while deriving Sentiment Score."
        return err    

#Deriving Sentiment Score and Review Count columns into the dataset
Devices_Sentiment_Data["Sentiment_Score"] = Devices_Sentiment_Data["Sentiment"].apply(Sentiment_Score_Derivation)
Devices_Sentiment_Data["Review_Count"] = 1.0    
    

RCR_context = """
    1. Your Job is to convert the user question to SQL Query (Follow Microsoft SQL server SSMS syntax.). You have to give the query so that it can be used on Microsoft SQL server SSMS.You have to only return query as a result.
    2. There is only one table with table name RCR_Sales_Data where each row has. The table has 20 columns, they are:
        Month: Contains dates for the records
        Country: From where the sales has happened. It contains following values: 'Turkey','India','Brazil','Germany','Philippines','France','Netherlands','Spain','United Arab Emirates','Czech Republic','Norway','Belgium','Finland','Canada','Mexico','Russia','Austria','Poland','United States','Switzerland','Italy','Colombia','Japan','Chile','Sweden','Vietnam','Saudi Arabia','South Africa','Peru','Indonesia','Taiwan','Thailand','Ireland','Korea','Hong Kong SAR','Malaysia','Denmark','New Zealand','China' and 'Australia'.
        Geography: From which Country or Region the review was given. It contains following values: 'Unknown', 'Brazil', 'Australia', 'Canada', 'China', 'Germany','France'.
        OEMGROUP: OEM or Manufacturer of the Device. It contains following values: 'Lenovo','Acer','Asus','HP','All Other OEMs', 'Microsoft' and 'Samsung'
        SUBFORMFACTOR: Formfactor of the device. It contains following values: 'Ultraslim Notebook'.
        GAMINGPRODUCTS: Flag whether Device is a gaming device or not. It contains following values: 'GAMING', 'NO GAMING' and 'N.A.'.
        SCREEN_SIZE_INCHES: Screen Size of the Device.
        PRICE_BRAND_USD_3: Band of the price at which the device is selling. It contains following values: '0-300', '300-500', '500-800' and '800+.
        OS_VERSION: Operating System version intall on the device. It contains following values: 'Windows 11', 'Chrome', 'Mac OS'.
        Operating_System_Summary: Operating System installed on the device. This is at uber level. It contains following values: 'Windows', 'Google OS', 'Apple OS'.
        Sales_Units: Number of Devices sold for that device in a prticular month and country.
        Sales_Value: Revenue Generated by the devices sold.
        Series: Family of the device such as IdeaPad 1, HP Laptop 15 etc.
        Specs_Combination: Its contains the combination of Series, Processor, RAM , Storage and Screen Size. For Example: SURFACE LAPTOP GO | Ci5 | 8 GB | 256.0 SSD | 12" .
        Chassis Segment: It contains following values: 'SMB_Upper','Mainstream_Lower','SMB_Lower','Enterprise Fleet_Lower','Entry','Mainstream_Upper','Premium Mobility_Upper','Enterprise Fleet_Upper','Premium Mobility_Lower','Creation_Lower','UNDEFINED','Premium_Mobility_Upper','Enterprise Work Station','Unknown','Gaming_Musclebook','Entry_Gaming','Creation_Upper','Mainstrean_Lower'
        
    3.  When Asked for Price Range you have to use ASP Column to get minimum and Maxium value. Do not consider Negative Values. Also Consider Sales Units it shouldn't be 0.
        Exaple Query:
            SELECT MIN(ASP) AS Lowest_Value, MAX(ASP) AS Highest_Value
            FROM RCR_Sales_Data
            WHERE
            Series = 'Device Name'
            AND ASP >= 0
            AND Sales_Units <> 0;
    4. Total Sales_Units Should Always be in Thousands. 
        Example Query:
            SELECT (SUM(Sales_Units) / 1000) AS "TOTAL SALES UNITS"
            FROM RCR_Sales_Data
            WHERE
            SERIES LIKE '%SURFACE LAPTOP GO%';
    5. Average Selling Price (ASP): It is calculated by sum of SUM(Sales_Value)/SUM(Sales_Units)
    6. Total Sales Units across countries or across regions is sum of sales_units for those country. It should be in thousand of million hence add "K" or "M" after the number.
        Example to calculate sales units across country:
            SELECT Country, (SUM(Sales_Units) / 1000) AS "Sales_Units(In Thousands)"
            FROM RCR_Sales_Data
            GROUP BY Country
            ORDER BY Sales_Units DESC
    7. Total Sales Units across column "X" or across regions is sum of sales_units for those country. It should be in thousand of million hence add "K" or "M" after the number.
        Example to calculate sales units across country:
            SELECT "X", (SUM(Sales_Units) / 1000) AS "Sales_Units(In Thousands)"
            FROM RCR_Sales_Data
            GROUP BY "X"
            ORDER BY Sales_Units DESC
    8. If asked about the highest selling Specs Combination. 
        Example Query:
            SELECT Specs_Combination, (SUM(Sales_Units) / 1000) AS "TOTAL SALES UNITS"
            FROM RCR_Sales_Data
            WHERE SERIES LIKE '%Macbook AIR%'
            AND SALES_UNITS <> 0
            GROUP BY Specs_Combination
            ORDER BY "TOTAL SALES UNITS" DESC
            LIMIT 1;
    9. If asked about similar compete devices.
    Example Query:
            SQL = WITH DeviceNameASP AS (
                    SELECT
                        'Device Name' AS Series,
                        SUM(Sales_Value) / SUM(Sales_Units) AS ASP,
                        Chassis_Segment,
                        SUM(Sales_Units) AS Sales_Units
                    FROM
                        RCR_Sales_Data
                    WHERE
                        Series LIKE '%Device Name%'
                    GROUP BY
                        Chassis_Segment
                ),
                CompetitorASP AS (
                    SELECT
                        Series,
                        SUM(Sales_Value) / SUM(Sales_Units) AS ASP,
                        Chassis_Segment,
                        SUM(Sales_Units) AS Sales_Units
                    FROM
                        RCR_Sales_Data
                    WHERE
                        Operating_System_Summary IN ('Apple OS', 'Google OS','Windows OS')
                        AND SERIES NOT LIKE '%Device Name%'
                    GROUP BY
                        Series, Chassis_Segment
                ),
                RankedCompetitors AS (
                    SELECT
                        C.Series,
                        C.ASP,
                        C.Chassis_Segment,
                        C.Sales_Units,
                        ROW_NUMBER() OVER (PARTITION BY C.Chassis_Segment ORDER BY C.Sales_Units DESC) AS rank
                    FROM
                        CompetitorASP C
                    JOIN
                        DeviceNameASP S
                    ON
                        ABS(C.ASP - S.ASP) <= 400
                        AND C.Chassis_Segment = S.Chassis_Segment
                )
                SELECT
                    Series,
                    ASP AS CompetitorASP,
                    Sales_Units
                FROM
                    RankedCompetitors
                WHERE
                    rank <= 3;

    10. If asked about dates or year SUBSTR() function instead of Year() or Month()
    11. Convert numerical outputs to float upto 2 decimal point.
    12. Always include ORDER BY clause to sort the table based on the aggregate value calculated in the query.
    13. Always use 'LIKE' operator whenever they mention about any Country, Series. Use 'LIMIT' operator instead of TOP operator.Do not use TOP OPERATOR. Follow syntax that can be used with pandasql.
    14. If you are using any field in the aggregate function in select statement, make sure you add them in GROUP BY Clause.
    15. Make sure to Give the result as the query so that it can be used on Microsoft SQL server SSMS.
    16. Always use LIKE function instead of = Symbol while generating SQL Query
    17. Important: User can ask question about any categories including Country, OEMGROUP,OS_VERSION etc etc. Hence, include the in SQL Query if someone ask it.
    18. Important: Use the correct column names listed above. There should not be Case Sensitivity issue. 
    19. Important: The values in OPERATING_SYSTEM_SUMMARY are ('Apple OS', 'Google OS') not ('APPLE OS', 'GOOGLE OS'). So use exact values. Not everything should be capital letters.
    20. Important: You Response should directly starts from SQL query nothing else."""

interaction = ""

# Initialize an empty context

def generate_SQL_Query(user_question):
    global RCR_context, interaction
    # Append the new question to the context
    full_prompt = RCR_context + interaction + "\nQuestion:\n" + user_question + "\nAnswer:"
    
    # Send the query to Azure OpenAI
    response = client.completions.create(
        model=deployment_name,
        prompt=full_prompt,
        max_tokens=500,
        temperature=0
    )
    
    # Extract the generated SQL query
    sql_query = response.choices[0].text.strip()
    
    # Update context with the latest interaction
    interaction += "\nQuestion:\n" + user_question + "\nAnswer:\n" + sql_query
    
    return sql_query

#Converting Top Operator to Limit Operator as pandasql doesn't support Top
def convert_top_to_limit(sql):
    tokens = sql.upper().split()
    is_top_used = False

    for i, token in enumerate(tokens):
        if token == 'TOP':
            is_top_used = True
            if i + 1 < len(tokens) and tokens[i + 1].isdigit():
                limit_value = tokens[i + 1]
                # Remove TOP and insert LIMIT and value at the end
                del tokens[i:i + 2]
                tokens.insert(len(tokens), 'LIMIT')
                tokens.insert(len(tokens), limit_value)
                break  # Exit loop after successful conversion
            else:
                raise ValueError("TOP operator should be followed by a number")

    return ' '.join(tokens) if is_top_used else sql


def process_tablename(sql, table_name):
    x = sql.upper()
    query = x.replace(table_name.upper(), table_name)
    return query




def get_sales_units(device_name):
    try:
        question = "Totals Sales Units for " + device_name
        a = generate_SQL_Query(question)
        SQL_Query = convert_top_to_limit(a)
        SQL_Query = process_tablename(SQL_Query,"RCR_Sales_Data")
        data = ps.sqldf(SQL_Query, globals())
        col_name = data.columns[0]
        total_sales = data[col_name][0]
        total_sales = str(round(total_sales,2)) + "K"
    except:
        total_sales = "NA"
        
    return total_sales
    
st.markdown("""
<head>
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.4.0/css/font-awesome.min.css">
</head>
""", unsafe_allow_html=True) 
  
def get_star_rating_html(net_sentiment):
    try:
        # Normalize net sentiment from -100 to 100 to 0 to 10 for star ratings
        normalized_rating = (net_sentiment + 100) / 40

        # Determine the number of full and half stars
        full_stars = int(normalized_rating)
        half_star = 1 if normalized_rating - full_stars >= 0.5 else 0

        # CSS for the stars
        star_style = 'font-size: 16px; margin-right: 5px; color: gold;'  # Adjust font-size and margin-right as needed

        # Generate the HTML for the stars
        star_html = '<span>'
        star_html += f'<i class="fa fa-star" style="{star_style}"></i>' * full_stars
        if half_star:
            star_html += f'<i class="fa fa-star-half-o" style="{star_style}"></i>'  # Half-star icon from Font Awesome
        star_html += f'<i class="fa fa-star-o" style="{star_style}"></i>' * (5 - full_stars - half_star)
        star_html += '</span>'
        return star_html
    except:
        return "NA"

def correct_compete_sales_query(SQL_Query):
    strr = SQL_Query
    strr = strr.replace("ABS(C.ASP - S.ASP) < LIKE  400","ABS(C.ASP - S.ASP) <=  400")
    strr = strr.replace("RANK < LIKE  3","RANK <=  3")
    strr = strr.replace("AND C.CHASSIS_SEGMENT  LIKE  S.CHASSIS_SEGMENT", "AND C.CHASSIS_SEGMENT  =  S.CHASSIS_SEGMENT")
    return strr


def get_ASP(device_name):
    try:
        question = "What's ASP for " + device_name
        a = generate_SQL_Query(question)
        SQL_Query = convert_top_to_limit(a)
        SQL_Query = process_tablename(SQL_Query,"RCR_Sales_Data")
        data = ps.sqldf(SQL_Query, globals())
        col_name = data.columns[0]
        asp = data[col_name][0]
        asp = "$" + str(int(round(asp,0)))
    except:
        asp = "NA"
    return asp

def get_highest_selling_specs(device_name):
    try:
        question = "What's highest selling Specs Combination for " + device_name
        a = generate_SQL_Query(question)
        SQL_Query = convert_top_to_limit(a)
        SQL_Query = process_tablename(SQL_Query,"RCR_Sales_Data")
        data = ps.sqldf(SQL_Query, globals())
        col_name1 = data.columns[0]
        col_name2 = data.columns[1]
        specs = data[col_name1][0]
        sales_unit = data[col_name2][0]
        sales_unit = str(round(sales_unit,2)) + "K"
    except:
        specs = "NA"
        sales_unit = "NA"
    return specs,sales_unit

def compete_device(device_name):
    try:
        question = "What are the compete device for " + device_name
        a = generate_SQL_Query(question)
        SQL_Query = convert_top_to_limit(a)
        SQL_Query = process_tablename(SQL_Query,"RCR_Sales_Data")
        SQL_Query = SQL_Query.replace('APPLE','Apple')
        SQL_Query = SQL_Query.replace('GOOGLE','Google')
        SQL_Query = SQL_Query.replace('WINDOWS','Windows')
#         st.write(f"SQL Query to get competitor device for {device_name}: \n{SQL_Query}")
        SQL_Query = correct_compete_sales_query(SQL_Query)
        data = ps.sqldf(SQL_Query, globals())
        
    except:
        data = None
    return data
    
def get_sales_device_name(input_device):
    try:
        sales_device_name = dev_mapping[dev_mapping['SentimentDevice']==input_device]['SalesDevice']
        if len(sales_device_name) == 0:
            sales_device_name = dev_mapping[dev_mapping['SalesDevice']==input_device]['SalesDevice']
        if len(sales_device_name) == 0:
            sales_device_name = None
        else:
            sales_device_name = sales_device_name.to_list()[0]
    except:
        sales_device_name = None
    return sales_device_name

def get_sentiment_device_name(input_device):
    try:
        sentiment_device_name = dev_mapping[dev_mapping['SalesDevice']==input_device]['SentimentDevice']
        if len(sentiment_device_name) == 0:
            sentiment_device_name = dev_mapping[dev_mapping['SentimentDevice']==input_device]['SentimentDevice']
        if len(sentiment_device_name) == 0:
            sentiment_device_name = None
        else:
            sentiment_device_name = sentiment_device_name.to_list()[0]
    except:
        sentiment_device_name = None
    return sentiment_device_name
    
def get_device_image(user_input):
    dev = user_input
    try:
        # Assuming the images are in a folder named 'Device Images'
        img_folder = 'Device Images'
        img_path = os.path.join(img_folder, f"{dev}.jpg")
        if not os.path.exists(img_path):
            img_path = None
    except:
        img_path = None
    return (dev, img_path)
    
def get_net_sentiment(device_name):
    a = query_quant_devices(device_name)
    try:
        Net_Sentiment = float(a[a['ASPECT']=='TOTAL']['ASPECT_SENTIMENT'].values[0])
        aspects = a["ASPECT"].unique()
        if "Performance" in aspects:
            Performance_Sentiment = float(a[a['ASPECT']=='Performance']['ASPECT_SENTIMENT'].values[0])
        else:
            Performance_Sentiment = 0
        
        if "Design" in aspects:
            Design_Sentiment = float(a[a['ASPECT']=='Design']['ASPECT_SENTIMENT'].values[0])
        else:
            Design_Sentiment = 0
        
        if "Display" in aspects:
            Display_Sentiment = float(a[a['ASPECT']=='Display']['ASPECT_SENTIMENT'].values[0])
        else:
            Display_Sentiment = 0
        
        if "Battery" in aspects:
            Battery_Sentiment = float(a[a['ASPECT']=='Battery']['ASPECT_SENTIMENT'].values[0])
        else:
            Battery_Sentiment = 0
        
        if "Price" in aspects:
            Price_Sentiment = float(a[a['ASPECT']=='Price']['ASPECT_SENTIMENT'].values[0])
        else:
            Price_Sentiment = 0
        
        if "Software" in aspects:
            Software_Sentiment = float(a[a['ASPECT']=='Software']['ASPECT_SENTIMENT'].values[0])
        else:
            Software_Sentiment = 0
            
            
        aspect_sentiment = list((Performance_Sentiment, Design_Sentiment, Display_Sentiment, Battery_Sentiment, Price_Sentiment, Software_Sentiment))
                                 
    except:
        Net_Sentiment = None
        aspect_sentiment = None     
    return Net_Sentiment, aspect_sentiment

def get_comp_device_details(user_input, df1):
    df1['SERIES'] = df1['SERIES'].str.upper()
    sales_data = df1[df1['SERIES'] == user_input]
    dev = user_input
    try:
        sentiment_device_name = get_sentiment_device_name(user_input)
    except:
        sentiment_device_name = None
    try:
        # Assuming the images are in a folder named 'Device Images'
        img_folder = 'Device Images'
        img_path = os.path.join(img_folder, f"{sentiment_device_name}.jpg")
        if not os.path.exists(img_path):
            img_not_found = "Image Not Found"
            img_path = os.path.join(img_folder, f"{img_not_found}.jpg")
    except:
        img_path = None
    if sales_data.empty:
        return user_input, img_path, None, None, None  # Return dev and link, but None for sales and ASP if no matching SERIES is found
    
    try:
        sales = str(round(float(sales_data['SALES_UNITS'].values[0]) / 1000, 2)) + "K"
    except:
        sales = "NA"
    try:
        ASP = "$" + str(int(sales_data['COMPETITORASP'].values[0]))
    except:
        ASP = "NA"
    net_sentiment,aspect_sentiment = get_net_sentiment(sentiment_device_name)
    return dev, img_path, sales, ASP, net_sentiment
    
st.markdown("""
<head>
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.4.0/css/font-awesome.min.css">
</head>
""", unsafe_allow_html=True) 
  
def get_star_rating_html(net_sentiment):
    try:
        # Normalize net sentiment from -100 to 100 to 0 to 10 for star ratings
        normalized_rating = (net_sentiment + 100) / 40

        # Determine the number of full and half stars
        full_stars = int(normalized_rating)
        half_star = 1 if normalized_rating - full_stars >= 0.5 else 0

        # CSS for the stars
        star_style = 'font-size: 16px; margin-right: 5px; color: gold;'  # Adjust font-size and margin-right as needed

        # Generate the HTML for the stars
        star_html = '<span>'
        star_html += f'<i class="fa fa-star" style="{star_style}"></i>' * full_stars
        if half_star:
            star_html += f'<i class="fa fa-star-half-o" style="{star_style}"></i>'  # Half-star icon from Font Awesome
        star_html += f'<i class="fa fa-star-o" style="{star_style}"></i>' * (5 - full_stars - half_star)
        star_html += '</span>'
        return star_html
    except:
        return "NA"
    
    
def get_final_df_devices(aspects_list,device):
    final_df = pd.DataFrame()
    device = device
    aspects_list = aspects_list
    # Iterate over each aspect and execute the query
    for aspect in aspects_list:
        # Construct the SQL query for the current aspect
        query = f"""
        SELECT Keywords,
               COUNT(CASE WHEN Sentiment = 'Positive' THEN 1 END) AS Positive_Count,
               COUNT(CASE WHEN Sentiment = 'Negative' THEN 1 END) AS Negative_Count,
               COUNT(CASE WHEN Sentiment = 'Neutral' THEN 1 END) AS Neutral_Count,
               COUNT(*) as Total_Count
        FROM Devices_Sentiment_Data
        WHERE Aspect = '{aspect}' AND Product_Family LIKE '%{device}%'
        GROUP BY Keywords
        ORDER BY Total_Count DESC;
        """

        # Execute the query and get the result in 'key_df'
        key_df = ps.sqldf(query, globals())

        # Calculate percentages and keyword contribution
        total_aspect_count = key_df['Total_Count'].sum()
        key_df['Positive_Percentage'] = (key_df['Positive_Count'] / total_aspect_count) * 100
        key_df['Negative_Percentage'] = (key_df['Negative_Count'] / total_aspect_count) * 100
        key_df['Neutral_Percentage'] = (key_df['Neutral_Count'] / total_aspect_count) * 100
        key_df['Keyword_Contribution'] = (key_df['Total_Count'] / total_aspect_count) * 100

        # Drop the count columns
        key_df = key_df.drop(['Positive_Count', 'Negative_Count', 'Neutral_Count', 'Total_Count'], axis=1)

        # Add the current aspect to the DataFrame
        key_df['Aspect'] = aspect

        # Sort by 'Keyword_Contribution' and select the top 2 for the current aspect
        key_df = key_df.sort_values(by='Keyword_Contribution', ascending=False).head(2)

        # Append the results to the final DataFrame
        final_df = pd.concat([final_df, key_df], ignore_index=True)
        
    return final_df

def get_conversational_chain_detailed_summary_devices():
    try:
        
        prompt_template = """
        1. Your Job is to analyse the Net Sentiment, Aspect wise sentiment and Key word regarding the different aspect and summarize the reviews that user asks for utilizing the reviews and numbers you get. Use maximum use of the numbers and Justify the numbers using the reviews.
        
        Your will receive Aspect wise net sentiment of the device. you have to concentrate on top 4 Aspects.
        For that top 4 Aspect you will get top 2 keywords for each aspect. You will receive each keywords' contribution and +ve mention % and negative mention %
        You will receive reviews of that devices focused on these aspects and keywords.
        
        For Each Aspect
        
        Condition 1 : If the net sentiment is less than aspect sentiment, which means that particular aspect is driving the net sentiment Higher for that device. In this case provide why the aspect sentiment is lower than net sentiment.
        Condition 2 : If the net sentiment is high than aspect sentiment, which means that particular aspect is driving the net sentiment Lower for that device. In this case provide why the aspect sentiment is higher than net sentiment. 

            IMPORTANT: Use only the data provided to you and do not rely on pre-trained documents.

            Your summary should justify the above conditions and tie in with the net sentiment and aspect sentiment and keywords. Mention the difference between Net Sentiment and Aspect Sentiment (e.g., -2% or +2% higher than net sentiment) in your summary and provide justification.
            
            Your response should be : 
            
            For Each Aspect 
                    Net Sentiment of the device and aspect sentiment of that aspect of the device (Mention Performance, Aspect Sentiment) . 
                    Top Keyword contribution and their positive and negative percentages and summarize Reviews what user have spoken regarding this keywords in 2 to 3 lines detailed
                    Top 2nd Keyword contribution and their positive and negative percentages and summarize Reviews what user have spoken regarding this keywords in 2 to 3 lines detailed
                       Limit yourself to top 3 keywords and don't mention as top 1, top 2, top 3 and all. Mention them as pointers
                    Overall Summary
            
            IMPORTANT : Example Template :
            
            ALWAYS FOLLOW THIS TEMPLATE : Don't miss any of the below:
                                    
            Response : "BOLD ALL THE NUMBERS"
            
            IMPOPRTANT : Start with : "These are the 4 major aspects users commented about" and mention their review count contributions
               
                           These are the 4 major aspects users commented about:
                           
                        - Total Review for Vivobook Device is 1200
                        - Price: 13.82% of the reviews mentioned this aspect
                        - Performance: 11.08% of the reviews mentioned this aspect
                        - Software: 9.71% of the reviews mentioned this aspect
                        - Design: 7.37% of the reviews mentioned this aspect

                        Price:
                        - The aspect sentiment for price is 52.8%, which is higher than the net sentiment of 38.5%. This indicates that the aspect of price is driving the net sentiment higher for the Vivobook.
                        -  The top keyword for price is "buy" with a contribution of 28.07%. It has a positive percentage of 13.44% and a negative percentage of 4.48%.
                              - Users mentioned that the Vivobook offers good value for the price and is inexpensive.
                        - Another top keyword for price is "price" with a contribution of 26.89%. It has a positive percentage of 23.35% and a negative percentage of 0.24%.
                            - Users praised the affordable price of the Vivobook and mentioned that it is worth the money.

                        Performance:
                        - The aspect sentiment for performance is 36.5%, which is lower than the net sentiment of 38.5%. This indicates that the aspect of performance is driving the net sentiment lower for the Vivobook.
                        - The top keyword for performance is "fast" with a contribution of 18.24%. It has a positive percentage of 16.76% and a neutral percentage of 1.47%.
                            - Users mentioned that the Vivobook is fast and offers good speed.
                        - Another top keyword for performance is "speed" with a contribution of 12.06%. It has a positive percentage of 9.12% and a negative percentage of 2.06%.
                            - Users praised the speed of the Vivobook and mentioned that it is efficient.
                                            
                                            
                        lIKE THE ABOVE ONE EXPLAIN OTHER 2 ASPECTS

                        Overall Summary:
                        The net sentiment for the Vivobook is 38.5%, while the aspect sentiment for price is 52.8%, performance is 36.5%, software is 32.2%, and design is 61.9%. This indicates that the aspects of price and design are driving the net sentiment higher, while the aspects of performance and software are driving the net sentiment lower for the Vivobook. Users mentioned that the Vivobook offers good value for the price, is fast and efficient in performance, easy to set up and use in terms of software, and has a sleek and high-quality design.
  
                        Some Pros and Cons of the device, 
                        
                        
           IMPORTANT : Do not ever change the above template of Response. Give Spaces accordingly in the response to make it more readable.
           
           A Good Response should contains all the above mentioned poniters in the example. 
               1. Net Sentiment and The Aspect Sentiment
               2. Total % of mentions regarding the Aspect
               3. A Quick Summary of whether the aspect is driving the sentiment high or low
               4. Top Keyword: Gaming (Contribution: 33.22%, Positive: 68.42%, Negative: 6.32%)
                    - Users have praised the gaming experience on the Lenovo Legion, with many mentioning the smooth gameplay and high FPS.
                    - Some users have reported experiencing lag while gaming, but overall, the gaming performance is highly rated.
                    
                Top 3 Keywords : Their Contribution, Postitive mention % and Negative mention % and one ot two positive mentions regarding this keywords in each pointer
                
                5. IMPORTANT : Pros and Cons in pointers (overall, not related to any aspect)
                6. Overall Summary

                    
          Enhance the model’s comprehension to accurately interpret user queries by:
          Recognizing abbreviations for country names (e.g., ‘DE’ for Germany, ‘USA’or 'usa' or 'US' for the United States of America) and expanding them to their full names for clarity.
          Understanding product family names even when written in reverse order or missing connecting words (e.g., ‘copilot in windows 11’ as ‘copilot windows’ and ‘copilot for security’ as ‘copilot security’ etc.).
          Utilizing context and available data columns to infer the correct meaning and respond appropriately to user queries involving variations in product family names or geographical references
          Please provide a comprehensive Review summary, feature comparison, feature suggestions for specific product families and actionable insights that can help in product development and marketing strategies.
          Generate acurate response only, do not provide extra information.
            
            Important: Generate outputs using the provided dataset only, don't use pre-trained information to generate outputs.\n
        Context:\n {context}?\n
        Question: \n{question}\n

        Answer:
        """
        prompt = PromptTemplate(template=prompt_template, input_variables=["context", "question"])
        model = AzureChatOpenAI(
            azure_deployment=azure_deployment_name,
            api_version='2023-12-01-preview',
            temperature = 0.0)
        chain = load_qa_chain(model, chain_type="stuff", prompt=prompt)
        return chain
    except:
        err = f"An error occurred while getting conversation chain for detailed review summarization."
        return err

# Function to handle user queries using the existing vector store
def query_detailed_summary_devices(user_question, vector_store_path="faiss_index_Windows_116k"):
    try:
        embeddings = AzureOpenAIEmbeddings(azure_deployment=azure_embedding_name)
        vector_store = FAISS.load_local(vector_store_path, embeddings, allow_dangerous_deserialization=True)
        chain = get_conversational_chain_detailed_summary_devices()
        docs = vector_store.similarity_search(user_question)
        response = chain({"input_documents": docs, "question": user_question}, return_only_outputs=True)
        return response["output_text"]
    except:
        err = f"An error occurred while getting LLM response for detailed review summarization."
        return err
        
def get_detailed_summary(device_name):
    try:
        if device_name:
            data = query_quant_devices("Summarize the reviews of "+ device_name)
            total_reviews = data.loc[data['ASPECT'] == 'TOTAL', 'REVIEW_COUNT'].iloc[0]
            data['REVIEW_PERCENTAGE'] = data['REVIEW_COUNT'] / total_reviews * 100
            dataframe_as_dict = data.to_dict(orient='records')
            data_new = data
            data_new = data_new.dropna(subset=['ASPECT_SENTIMENT'])
            data_new = data_new[~data_new["ASPECT"].isin(["Generic", "Account", "Customer-Service", "Browser"])]
            vmin = data_new['ASPECT_SENTIMENT'].min()
            vmax = data_new['ASPECT_SENTIMENT'].max()
            styled_df = data_new.style.applymap(lambda x: custom_color_gradient(x, vmin, vmax), subset=['ASPECT_SENTIMENT'])
            data_filtered = data_new[data_new['ASPECT'] != 'TOTAL']
            data_sorted = data_filtered.sort_values(by='REVIEW_COUNT', ascending=False)
            top_four_aspects = data_sorted.head(4)
            aspects_list = top_four_aspects['ASPECT'].to_list()
            formatted_aspects = ', '.join(f"'{aspect}'" for aspect in aspects_list)
            key_df = get_final_df_devices(aspects_list, device_name)
            b =  key_df.to_dict(orient='records')
            su = query_detailed_summary_devices("Summarize reviews of" + device_name + "for " +  formatted_aspects +  "Aspects which have following "+str(dataframe_as_dict)+ str(b) + "Reviews: ")
    except:
        su = "I don't have sufficient data to provide a complete and accurate response at this time. Please provide more details or context."
    return su

def get_conversational_chain_summary():
    
    prompt_template = """
    Your task is to analyze the reviews of Windows products and generate a summary of the pros and cons for each product based on the provided dataset.Provide an overall summary. focus only on listing the pros and cons. 
    Use the format below for your response:

    Pros and Cons of [Product Name]:

    Pros:

    [Aspect]: [Brief summary of positive feedback regarding this aspect. Include specific examples if available.]
    [Aspect]: [Brief summary of positive feedback regarding this aspect. Include specific examples if available.]
    [Aspect]: [Brief summary of positive feedback regarding this aspect. Include specific examples if available.]
    [Aspect]: [Brief summary of positive feedback regarding this aspect. Include specific examples if available.]
    [Aspect]: [Brief summary of positive feedback regarding this aspect. Include specific examples if available.]
    Cons:

    [Aspect]: [Brief summary of negative feedback regarding this aspect. Include specific examples if available.]
    [Aspect]: [Brief summary of negative feedback regarding this aspect. Include specific examples if available.]
    [Aspect]: [Brief summary of negative feedback regarding this aspect. Include specific examples if available.]
    [Aspect]: [Brief summary of negative feedback regarding this aspect. Include specific examples if available.]
    [Aspect]: [Brief summary of negative feedback regarding this aspect. Include specific examples if available.]
    
    [Overall Summary]: [Brief summary of overall feedback regarding all aspect.]
    The dataset includes the following columns:

    Review: Review of the Windows product.
    Data_Source: Source of the review, containing different retailers.
    Geography: Country or region of the review.
    Title: Title of the review.
    Review_Date: Date the review was posted.
    Product: Product the review corresponds to, with values: "Windows 11 (Preinstall)", "Windows 10".
    Product_Family: Version or type of the corresponding product.
    Sentiment: Sentiment of the review, with values: 'Positive', 'Neutral', 'Negative'.
    Aspect: Aspect or feature of the product discussed in the review, with values: "Audio-Microphone", "Software", "Performance", "Storage/Memory", "Keyboard", "Browser", "Connectivity", "Hardware", "Display", "Graphics", "Battery", "Gaming", "Design", "Ports", "Price", "Camera", "Customer-Service", "Touchpad", "Account", "Generic".
    Keywords: Keywords mentioned in the review.
    Review_Count: Will be 1 for each review or row.
    Sentiment_Score: Will be 1, 0, or -1 based on the sentiment.
    Please ensure that the response is based on the analysis of the provided dataset, summarizing both positive and negative aspects of each product.
    Important: Generate outputs using the provided dataset only, don't use pre-trained information to generate outputs.\n
     
        
    Context:\n {context}?\n
    Question: \n{question}\n
 
    Answer:
    """
    model = AzureChatOpenAI(
    azure_deployment=azure_deployment_name,
    api_version='2023-12-01-preview',temperature = 0)
    prompt = PromptTemplate(template=prompt_template, input_variables=["context", "question"])
    chain = load_qa_chain(model, chain_type="stuff", prompt=prompt)
    return chain

def query_to_embedding_summarize(user_question, txt_file_path):
    text = get_txt_text(txt_file_path)
    chunks = get_text_chunks(text)
    get_vector_store(chunks)
    embeddings = AzureOpenAIEmbeddings(azure_deployment=azure_embedding_name)
    
    # Load the vector store with the embeddings model
    new_db = FAISS.load_local("faiss-index", embeddings, allow_dangerous_deserialization=True)
    docs = new_db.similarity_search(user_question)
    chain = get_conversational_chain_summary()
    response = chain({"input_documents": docs, "question": user_question}, return_only_outputs=True)
    return response['output_text']

def generate_device_details(device_input):
    global interaction
    device_name, img_link = get_device_image(device_input)
    net_Sentiment,aspect_sentiment = get_net_sentiment(device_name)
    sales_device_name = get_sales_device_name(device_name)
    total_sales = get_sales_units(sales_device_name)
    asp = get_ASP(sales_device_name)
    high_specs, sale = get_highest_selling_specs(sales_device_name)
    star_rating_html = get_star_rating_html(net_Sentiment)
#     st.write(f"Sales Device Name: {sales_device_name}")
    comp_devices = compete_device(sales_device_name)
    interaction = ""
    return device_name, img_link, net_Sentiment, aspect_sentiment, total_sales, asp, high_specs, sale, star_rating_html, comp_devices

def load_and_resize_image(url, new_height):
    try:
        img = Image.open(url)
        aspect_ratio = img.width / img.height
        new_width = int(aspect_ratio * new_height)
        resized_img = img.resize((new_width, new_height))
        return resized_img  # Return the resized PIL image object
    except:
        st.write("Image not available for this product.")
        return None
    
def get_txt_text(txt_file_path):
    with io.open(txt_file_path, 'r', encoding='utf-8') as f:
        text = f.read()
    return text

def get_text_chunks(text):
    text_splitter = RecursiveCharacterTextSplitter(chunk_size=10000)
    chunks = text_splitter.split_text(text)
    return chunks

def get_vector_store(chunks):
    embeddings = AzureOpenAIEmbeddings(azure_deployment=azure_embedding_name)
    vector_store = FAISS.from_texts(chunks, embedding=embeddings)
    vector_store.save_local("faiss-index")
    
def device_details(device):
    device_name, img_link, net_Sentiment, aspect_sentiment, total_sales, asp, high_specs, sale, star_rating_html, comp_devices = generate_device_details(device)
    aspects = ['Performance', 'Design', 'Display', 'Battery', 'Price', 'Software']
    with st.container(border = True):
        if device_name:
            with st.container(border = False,height = 200):
                col1, inter_col_space, col2 = st.columns((1, 4, 1))
                with inter_col_space:
                    if img_link:
                        image1 = load_and_resize_image(img_link, 150)
                        st.image(image1)
                    else:
                        st.write("Image not available for this product.")
            with st.container(height=120, border = False):
                st.header(device_name)
            with st.container(height=50, border = False):
                st.markdown(star_rating_html, unsafe_allow_html=True)
            with st.container(height=165, border = False):
                st.write(f"Total Devices Sold: {total_sales}")
                st.write(f"Average Selling Price: {asp}")
                st.write(f"Highest Selling Specs: {high_specs} - {sale}")
            with st.container(height=300, border = False):
                st.subheader('Aspect Ratings')
                asp_rating = []
                for i in aspect_sentiment:
                    asp_rating.append(get_star_rating_html(i))
                for aspect, stars in zip(aspects, asp_rating):
                    st.markdown(f"{aspect}: {stars}",unsafe_allow_html=True)
            data_1 = Devices_Sentiment_Data.loc[Devices_Sentiment_Data["Product_Family"] == device]["Review"]
            a = device_name + "_Reviews.txt"
            data_1.to_csv(a, sep='\t')
            summary_1 = query_to_embedding_summarize("Give me the pros and cons of " + device_name, a)
#             summary_1 = "Placeholder Summary"
            st.write(summary_1)

def comparison_view(device1, device2):
    st.write(r"$\textsf{\Large Device Comparison}$")
    col1, col2 = st.columns(2)
    with col1:
        device_details(device1)
    with col2:
        device_details(device2)
        
        
def identify_devices(input_string):
    global full_response
    # First, check if any device in the Sales Data and Sentiment data is exactly in the input string
    devices_list_sentiment = list(Devices_Sentiment_Data['Product_Family'].unique())
    for device in devices_list_sentiment:
        if device in input_string:
            return device
    
    # If no exact match is found, use fuzzy matching
    most_matching_device_sentiment = process.extractOne(input_string, devices_list_sentiment, scorer=fuzz.token_set_ratio)  
    
    # Check the matching score
    if most_matching_device_sentiment[1] >= 60:
        return most_matching_device_sentiment[0]
    
    devices_list_sales = list(RCR_Sales_Data['Series'].unique())
    for device in devices_list_sales:
        if device in input_string:
            return device
    
    most_matching_device_sales = process.extractOne(input_string, devices_list_sales, scorer=fuzz.token_set_ratio)
    
    if most_matching_device_sales[1] >= 60:
        return most_matching_device_sales[0]
    else:
        return "Device not available"
        
def device_summarization(user_input):
    global full_response
    if user_input == "Device not availabe":
        message = "I don't have sufficient data to provide a complete and accurate response at this time. Please provide more details or context."
        st.write(message)
        full_response += message
    else:
        inp = user_input
        device_name, img_link, net_Sentiment, aspect_sentiment, total_sales, asp, high_specs, sale, star_rating_html, comp_devices = generate_device_details(inp)
        summ = get_detailed_summary(inp)
        full_response += summ
        html_code = f"""
        <div style="background-color: white; padding: 20px; border-radius: 10px; box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1); display: flex; align-items: center;">
            <div style="flex: 1; text-align: center;">
                <img src="data:image/jpeg;base64,{base64.b64encode(open(img_link, "rb").read()).decode()}"  style="width: 150px; display: block; margin: 0 auto;">
                <p style="color: black; font-size: 18px;">{device_name}</p>
                <p>{star_rating_html}</p>
            </div>
            <div style="width: 2px; height: 150px; border-left: 2px dotted #ccc; margin: 0 20px;"></div>
            <div style="flex: 2; color: black; font-size: 18px;">
                <p>Total Devices Sold: <strong>{total_sales}</strong></p>
                <p>Average Selling Price: <strong>{asp}</strong></p>
                <p>Highest Selling Specs: <strong>{high_specs}</strong> - <strong>{sale}</strong></p>
            </div>
        </div>
        """
        st.markdown(html_code, unsafe_allow_html=True)
        st.write("")
        st.write(r"$\textsf{\Large Detailed Summary}$")
        st.write(summ)
        st.write(r"$\textsf{\Large Compare with Similar Devices:}$")
        
        col_list = [None, None, None]
#         checkbox_state = []
#         for i in range(len(list(comp_devices['SERIES']))):
#             checkbox_state.append(False)
        col_list[0], col_list[1], col_list[2] = st.columns(3)
        comp_devices_list = comp_devices['SERIES'].tolist()
        for i in range(len(comp_devices_list)):
            with col_list[i]:
                com_device_name, img_path, com_sales, ASP, net_sentiment = get_comp_device_details(comp_devices_list[i], comp_devices)
                com_star_rating_html = get_star_rating_html(net_sentiment)
                with st.container(border = True, height = 300):
                    with st.container(border = False, height = 200):
                        html_content = f"""
                        <div style="text-align: center; display: inline-block; ">
                            <img src="data:image/jpeg;base64,{base64.b64encode(open(img_path, "rb").read()).decode()}" width="100" style="margin-bottom: 10px;">
                            <div style="font-size: 16px; color: #333;">{com_device_name}</div>
                            <div style="font-size: 14px; color: #666;">Sales: {com_sales}</div>
                            <div style="font-size: 14px; color: #666;">Average Selling Price: {ASP}</div>
                            <p>{com_star_rating_html}</p>
                        </div>
                    """

                        st.markdown(html_content, unsafe_allow_html=True)
#                     checkbox_state[i] = st.checkbox(f"Compare {com_device_name}")
          
#         for i in range(len(checkbox_state)):
#             if checkbox_state[i]:
#                 st.session_state['selected_device_comparison'] = comp_devices_list[i]
#                 st.write(f"You have selected device {comp_devices_list[i]}")
#                 break
#             st.session_state['selected_device_comparison'] = None
        
#         if st.session_state['selected_device_comparison']:
#             comparison_view(device_name,get_sentiment_device_name(st.session_state['selected_device_comparison']))

def extract_comparison_devices(user_question):
    try:
        # Define the prompt template
        prompt_template = """
        Given a user prompt to compare customer reviews for two products or devices, extract the two product names.
        
        For example: "How does the Surface Go 3 compare to the HP Zbook 9?"

        Extracted Products: Surface Go 3, HP Zbook 9
        
        Input: Compare [PRODUCT_A] to [PRODUCT_B].
        Output: PRODUCT_A, PRODUCT_B
        Context:
        {context}
        Question:
        {question}

        Answer:
        """


        # Initialize the model and prompt template
        prompt = PromptTemplate(template=prompt_template, input_variables=["context", "question"])
        model = AzureChatOpenAI(
            azure_deployment=azure_deployment_name,
            api_version='2023-12-01-preview',temperature = 0)
        chain = load_qa_chain(model, chain_type="stuff", prompt=prompt)

        # Get the response from the model
        response = chain({"input_documents": [], "question": user_question}, return_only_outputs=True)
        
        return response['output_text'].split(", ")
    
    except:
        print(f"An error occurred while identifying the prompt category.")
        return None

def identify_prompt(user_question):
    try:
        # Define the prompt template
        prompt_template = """
        Given a user prompt about customer reviews for products (Windows, Surface) and various different features, classify the prompt into one of three categories:

        1. Summarization: This prompt seeks a summary or analysis of the reviews for only one particular device expressed in words.
            (e.g.,"Summarize the reviews of Device A", 
                  "Generalize the reviews of Device A?", etc.)
           

        2. Comparison: This prompt seeks a comparison between exactly 2 devices based on reviews and also pros and cons between exactly 2 devices , it should only be an overall comparison, not specific to any feature or aspect.
            (e.g., "Compare Device A and Device B based on reviews",
                    "Give the pros and cons of Device A and Device B",
                    "pros and cons of Device A and Device B")
            
        3. Other: This prompt does not fit into the Summarization or Comparison categories or includes more than two devices in the user prompt.
            This category includes comparisons between 2 devices with a particular aspect or feature comparison, and devices expressed in words might be separated with commas (',') or 'and'.
            (e.g., "Which product has better battery life according to reviews among Device A, Device B, Device C?",
                   "Compare Device A, Device B, Device C",
                   "Compare Device A and Device B in terms of battery life",
                   "Give the performance comparison among Device A, Device B, Device C",
                   "Summarize the key features of Device A, Device B, Device C",
                   "Can you provide a summary of the main features mentioned in Device A and Device B?
                   "Summarize the reviews of Device A with particular feature (e.g., battery life, Performance, etc.)"
                   "What features are most praised in Device B reviews"
            IMPORTANT:
                1. If the user prompt includes more than 2 devices for comparison, it should be handled in the Other category.
                2. If the user prompt includes exactly 2 devices for comparision but asks about a particular aspect or feature, it should be handled in the Other category.
                3. If the user prompt includes more than one device for device summary then it should be handled in the Other category.
                4. If the user prompt includes summarization of one device based on specific aspect i.e (battery, performance etc.) it should be handled in the Other category.

        Input: User prompt about customer reviews
        Output: Category (Summarization, Comparison, or Other)
        Context:
        {context}
        Question:
        {question}

        Answer:
        """


        # Initialize the model and prompt template
        prompt = PromptTemplate(template=prompt_template, input_variables=["context", "question"])
        model = AzureChatOpenAI(
            azure_deployment=azure_deployment_name,
            api_version='2024-03-01-preview',temperature = 0)
        chain = load_qa_chain(model, chain_type="stuff", prompt=prompt)

        # Get the response from the model
        response = chain({"input_documents": [], "question": user_question}, return_only_outputs=True)
        print(response)

        # Determine the output category based on the response
        if "summarization" in response["output_text"].lower():
            return "summarization"
        elif "comparison" in response["output_text"].lower():
            return "comparison"
        else:
            return "other"
    except:
        print(f"An error occurred while identifying the prompt category.")
        return None
        
def get_conversational_chain_devices_generic():
    try:
        prompt_template = """
        
            IMPORTANT: Use only the data provided to you and do not rely on pre-trained documents.

            INMPORTANT : Verbatims is nothing but Review. if user asks for top reviews. Give some important reviews user mentioned.
            
            Given a dataset with these columns: Review, Data_Source, Geography, Product_Family, Sentiment and Aspect (also called Features)
                      
                      Review: This column contains the opinions and experiences of users regarding different product families across geographies, providing insights into customer satisfaction or complaints and areas for improvement.
                      Data_Source: This column indicates the platform from which the user reviews were collected, such as Amazon, Flipkart, Bestbuy.
                      Geography: This column lists the countries of the users who provided the reviews, allowing for an analysis of regional preferences and perceptions of the products.
                      Product_Family: This column identifies the broader category of products to which the review pertains, enabling comparisons and trend analysis across different product families.
                      Sentiment: This column reflects the overall tone of the review, whether positive, negative, or neutral, and is crucial for gauging customer sentiment.
                      Aspect: This column highlights the particular features or attributes of the product that the review discusses, pinpointing areas of strength or concern.
                      
                      Perform the required task from the list below, as per user's query: 
                      1. Review Summarization - Summarize the reviews by filtering the relevant Aspect, Geography, Product_Family, Sentiment or Data_Source, only based on available reviews and their sentiments in the dataset.
                      2. Aspect Comparison - Provide a summarized comparison for each overlapping feature/aspect between the product families or geographies ,  only based on available user reviews and their sentiments in the dataset. Include pointers for each aspect highlighting the key differences between the product families or geographies, along with the positive and negative sentiments as per customer perception.
                      3. New Feature Suggestion/Recommendation - Generate feature suggestions or improvements or recommendations based on the frequency and sentiment of reviews and mentioned aspects and keywords. Show detailed responses to user queries by analyzing review sentiment, specific aspects, and keywords.
                      4. Hypothetical Reviews - Based on varying customer sentiments for the reviews in the existing dataset, generate hypothetical reviews for any existing feature updation or new feature addition in any device family across any geography, by simulating user reactions. Ensure to synthesize realistic reviews that capture all types of sentiments and opinions of users, by considering their hypothetical prior experience working with the new feature and generate output based on data present in dataset only. After these, provide solutions/remedies for negative hypothetical reviews. 
                      
                      IMPORTANT: Give as much as details as possible. Minimun number of Words should be 300 words atleat you can have more as well.
                      
                      Enhance the model’s comprehension to accurately interpret user queries by:
                      Recognizing abbreviations for country names (e.g., ‘DE’ for Germany, ‘USA’or 'usa' or 'US' for the United States of America) and expanding them to their full names for clarity.
                      Understanding product family names even when written in reverse order or missing connecting words such as HP Laptop 15, Lenovo Legion 5 15 etc
                      Utilizing context and available data columns to infer the correct meaning and respond appropriately to user queries involving variations in product family names or geographical references
                      Please provide a comprehensive Review summary, feature comparison, feature suggestions for specific product families and actionable insights that can help in product development and marketing strategies.
                      Generate acurate response only, do not provide extra information.
            
            Important: Generate outputs using the provided dataset only, don't use pre-trained information to generate outputs.
            
            If the user question is not in the data provided. Just mention - "Sorry! I do not have sufficient reviews for mentioned product.". 
            But do not restrict yourself in responding to the user questions like 'hello', 'Hi' and basic chat question
        Context:\n {context}?\n
        Question: \n{question}\n

        Answer:
        """
        prompt = PromptTemplate(template=prompt_template, input_variables=["context", "question"])
        model = AzureChatOpenAI(
            azure_deployment=azure_deployment_name,
            api_version='2024-03-01-preview',temperature = 0.2)
        
        chain = load_qa_chain(model, chain_type="stuff", prompt=prompt)
        return chain
    except:
        err = f"An error occurred while getting conversation chain for detailed review summarization."
        return err
      
def query_devices_detailed_generic(user_question, vector_store_path="faiss_index_Windows_116k"):
    try:
        embeddings = AzureOpenAIEmbeddings(azure_deployment=azure_embedding_name)
        vector_store = FAISS.load_local(vector_store_path, embeddings, allow_dangerous_deserialization=True)
        chain = get_conversational_chain_devices_generic()
        docs = vector_store.similarity_search(user_question)
        response = chain({"input_documents": docs, "question": user_question}, return_only_outputs=True)
        return response["output_text"]
    except:
        err = f"An error occurred while getting LLM response for detailed review summarization."
        return err

def get_conversational_chain_quant_devices():
    try:
        prompt_template = """
        
        If an user is asking for Summarize reviews of any product. Note that user is not seeking for reviews, user is seeking for all the Quantitative things of the product(Net Sentiment & Review Count) and also (Aspect wise sentiment and Aspect wise review count)
        So choose to Provide Net Sentiment and Review Count and Aspect wise sentiment and their respective review count and Union them in single table
        
        Example : If the user Quesiton is "Summarize reviews of CoPilot Produt"
        
        User seeks for net sentiment and aspect wise net sentiment of "Windows 10" Product and their respective review count in a single table
        
        Your response should be : Overall Sentiment is nothing but the net sentiment and overall review count of the product
        
                        Aspect Aspect_SENTIMENT REVIEW_COUNT
                    0 TOTAL 40 15000.0
                    1 Performance 31.8 2302.0
                    2 Gaming 20.2 570.0
                    3 Display 58.9 397.0
                    4 Design -1.2 345.0
                    5 Touchpad 20.1 288.0
                    6 Storage/Memory -22.9 271.0
                    7 Audio-Microphone -43.7 247.0
                    8 Software -28.6 185.0
                    9 Hardware 52.9 170.0
                    10 Keyboard 19.1 157.0
                    11 Account -44.7 152.0
                    12 Price 29.5 95.0
                    13 Graphics 18.9 90.0 and so on
                    
                    The Query has to be like this 
                    
                SELECT 'TOTAL' AS Aspect, 
                ROUND((SUM(Sentiment_Score) / SUM(Review_Count)) * 100, 1) AS Aspect_Sentiment, 
                SUM(Review_Count) AS Review_Count
                FROM Devices_Sentiment_Data
                WHERE Product_Family LIKE '%Asus Rog Zephyrus%'

                UNION

                SELECT Aspect, 
                ROUND((SUM(Sentiment_Score) / SUM(Review_Count)) * 100, 1) AS Aspect_Sentiment, 
                SUM(Review_Count) AS Review_Count
                FROM Devices_Sentiment_Data
                WHERE Product_Family LIKE '%Asus Rog Zephyrus%'
                GROUP BY Aspect

                ORDER BY Review_Count DESC

                    
                    
                IMPORTANT : if any particular Aspect "Performance" in user prompt:
                    

                        SELECT 'TOTAL' AS Aspect, 
                        ROUND((SUM(Sentiment_Score) / SUM(Review_Count)) * 100, 1) AS Aspect_Sentiment, 
                        SUM(Review_Count) AS Review_Count
                        FROM Devices_Sentiment_Data
                        WHERE Product_Family LIKE '%Asus Rog Zephyrus%'

                        UNION

                        SELECT Aspect, 
                        ROUND((SUM(Sentiment_Score) / SUM(Review_Count)) * 100, 1) AS Aspect_Sentiment, 
                        SUM(Review_Count) AS Review_Count
                        FROM Devices_Sentiment_Data
                        WHERE Product_Family LIKE '%Asus Rog Zephyrus%'
                        GROUP BY Aspect
                        HAVING Aspect LIKE %'Performance'%

                        ORDER BY Review_Count DESC


        
        IMPORTANT : IT has to be Net sentiment and Aspect Sentiment. Create 2 SQL Query and UNION them
        
        1. Your Job is to convert the user question to SQL Query (Follow Microsoft SQL server SSMS syntax.). You have to give the query so that it can be used on Microsoft SQL server SSMS.You have to only return query as a result.
            2. There is only one table with table name Devices_Sentiment_Data where each row is a user review. The table has 10 columns, they are:
                Review: Review of the Copilot Product
                Data_Source: From where is the review taken. It contains different retailers
                Geography: From which Country or Region the review was given. It contains different Grography.
                Title: What is the title of the review
                Review_Date: The date on which the review was posted
                Product: Corresponding product for the review. It contains following values: "Windows 11 (Preinstall)", "Windows 10"
                Product_Family: Which version or type of the corresponding Product was the review posted for. Different Device Names
                Sentiment: What is the sentiment of the review. It contains following values: 'Positive', 'Neutral', 'Negative'.
                Aspect: The review is talking about which aspect or feature of the product. It contains following values: "Audio-Microphone","Software","Performance","Storage/Memory","Keyboard","Browser","Connectivity","Hardware","Display","Graphics","Battery","Gaming","Design","Ports","Price","Camera","Customer-Service","Touchpad","Account","Generic"
                Keyword: What are the keywords mentioned in the product
                Review_Count - It will be 1 for each review or each row
                Sentiment_Score - It will be 1, 0 or -1 based on the Sentiment.
                
            3. Sentiment mark is calculated by sum of Sentiment_Score.
            4. Net sentiment is calculcated by sum of Sentiment_Score divided by sum of Review_Count. It should be in percentage. Example:
                    SELECT ((SUM(Sentiment_Score)*1.0)/(SUM(Review_Count)*1.0)) * 100 AS Net_Sentiment 
                    FROM Devices_Sentiment_Data
                    ORDER BY Net_Sentiment DESC
            5. Net sentiment across country or across region is sentiment mark of a country divided by total reviews of that country. It should be in percentage.
                Example to calculate net sentiment across country:
                    SELECT Geography, ((SUM(Sentiment_Score)*1.0) / (SUM(Review_Count)*1.0)) * 100 AS Net_Sentiment
                    FROM Devices_Sentiment_Data
                    GROUP BY Geography
                    ORDER BY Net_Sentiment DESC
            6. Net Sentiment across a column "X" is calculcated by Sentiment Mark for each "X" divided by Total Reviews for each "X".
                Example to calculate net sentiment across a column "X":
                    SELECT X, ((SUM(Sentiment_Score)*1.0) / (SUM(Review_Count)*1.0)) * 100 AS Net_Sentiment
                    FROM Devices_Sentiment_Data
                    GROUP BY X
                    ORDER BY Net_Sentiment DESC
            7. Distribution of sentiment is calculated by sum of Review_Count for each Sentiment divided by overall sum of Review_Count
                Example: 
                    SELECT Sentiment, SUM(ReviewCount)*100/(SELECT SUM(Review_Count) AS Reviews FROM Devices_Sentiment_Data) AS Total_Reviews 
                    FROM Devices_Sentiment_Data 
                    GROUP BY Sentiment
                    ORDER BY Total_Reviews DESC
            8. Convert numerical outputs to float upto 1 decimal point.
            9. Always include ORDER BY clause to sort the table based on the aggregate value calculated in the query.
            10. Top Country is based on Sentiment_Score i.e., the Country which have highest sum(Sentiment_Score)
            11. Always use 'LIKE' operator whenever they mention about any Country. Use 'LIMIT' operator instead of TOP operator.Do not use TOP OPERATOR. Follow syntax that can be used with pandasql.
            12. If you are using any field in the aggregate function in select statement, make sure you add them in GROUP BY Clause.
            13. Make sure to Give the result as the query so that it can be used on Microsoft SQL server SSMS.
            14. Important: Always show Net_Sentiment in Percentage upto 1 decimal point. Hence always make use of ROUND function while giving out Net Sentiment and Add % Symbol after it.
            15. Important: User can ask question about any categories including Aspects, Geograpgy, Sentiment etc etc. Hence, include the in SQL Query if someone ask it.
            16. Important: You Response should directly starts from SQL query nothing else.
            17. Important: Always use LIKE keyword instead of = symbol while generating SQL query.
            18. Important: Generate outputs using the provided dataset only, don't use pre-trained information to generate outputs.
            19. Sort all Quantifiable outcomes based on review count
        Context:\n {context}?\n
        Question: \n{question}\n

        Answer:
        """
        prompt = PromptTemplate(template=prompt_template, input_variables=["context", "question"])
        model = AzureChatOpenAI(
            azure_deployment=azure_deployment_name,
            api_version='2023-12-01-preview',
            temperature = 0)
        chain = load_qa_chain(model, chain_type="stuff", prompt=prompt)
        return chain
    except:
        err = f"An error occurred while getting conversation chain for quantifiable review summarization."
        return err

#Function to convert user prompt to quantitative outputs for Copilot Review Summarization
def query_quant_devices(user_question, vector_store_path="faiss_index_Windows_116k"):
    try:
        # Initialize the embeddings model
        embeddings = AzureOpenAIEmbeddings(azure_deployment=azure_embedding_name)
        # Load the vector store with the embeddings model
        vector_store = FAISS.load_local(vector_store_path, embeddings, allow_dangerous_deserialization=True)
        # Rest of the function remains unchanged
        chain = get_conversational_chain_quant_devices()
        docs = []
        response = chain({"input_documents": docs, "question": user_question}, return_only_outputs=True)
        SQL_Query = response["output_text"]
        SQL_Query = convert_top_to_limit(SQL_Query)
        SQL_Query = process_tablename(SQL_Query,"Devices_Sentiment_Data")
        data = ps.sqldf(SQL_Query, globals())
        data_1 = data
        return data_1
    except:
        err = f"An error occurred while generating response for quantitative review summarization."
        return err